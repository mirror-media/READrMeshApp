def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def devKeystoreProperties = new Properties()
def devKeystorePropertiesFile = rootProject.file('dev/dev.properties')
if (devKeystorePropertiesFile.exists()) {
    devKeystoreProperties.load(new FileInputStream(devKeystorePropertiesFile))
}

def stagingKeystoreProperties = new Properties()
def stagingKeystorePropertiesFile = rootProject.file('staging/staging.properties')
if (stagingKeystorePropertiesFile.exists()) {
    stagingKeystoreProperties.load(new FileInputStream(stagingKeystorePropertiesFile))
}

def prodKeystoreProperties = new Properties()
def prodKeystorePropertiesFile = rootProject.file('prod/prod.properties')
if (prodKeystorePropertiesFile.exists()) {
    prodKeystoreProperties.load(new FileInputStream(prodKeystorePropertiesFile))
}

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.readr.news"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndkVersion "23.0.7123448"
        ndk {
            debugSymbolLevel 'FULL'
        }
    }

    signingConfigs {
        dev {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["FCI_KEYSTORE_PATH"])
                storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["FCI_KEY_ALIAS"]
                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
            }else{
                keyAlias devKeystoreProperties['keyAlias']
                keyPassword devKeystoreProperties['keyPassword']
                storeFile devKeystoreProperties['storeFile'] ? file(devKeystoreProperties['storeFile']) : null
                storePassword devKeystoreProperties['storePassword']
            }
        }
        staging {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["FCI_KEYSTORE_PATH"])
                storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["FCI_KEY_ALIAS"]
                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
            }else{
                keyAlias stagingKeystoreProperties['keyAlias']
                keyPassword stagingKeystoreProperties['keyPassword']
                storeFile stagingKeystoreProperties['storeFile'] ? file(stagingKeystoreProperties['storeFile']) : null
                storePassword stagingKeystoreProperties['storePassword']
            }
        }
        prod {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["FCI_KEYSTORE_PATH"])
                storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["FCI_KEY_ALIAS"]
                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
            }else{
                keyAlias prodKeystoreProperties['keyAlias']
                keyPassword prodKeystoreProperties['keyPassword']
                storeFile prodKeystoreProperties['storeFile'] ? file(prodKeystoreProperties['storeFile']) : null
                storePassword prodKeystoreProperties['storePassword']
            }
        }
    }

    flavorDimensions 'flavors'
    productFlavors {
        dev {
            dimension "flavors"
            applicationIdSuffix ".dev"
        }
        staging {
            dimension "flavors"
            applicationIdSuffix ".staging"
        }
        prod {
            dimension "flavors"
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            productFlavors.dev.signingConfig signingConfigs.dev
            productFlavors.staging.signingConfig signingConfigs.staging
            productFlavors.prod.signingConfig signingConfigs.prod
            shrinkResources true
            minifyEnabled true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.gms:play-services-ads:21.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
